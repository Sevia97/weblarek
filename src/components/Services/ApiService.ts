import { IApi, IProduct, IOrderData, IOrderResult } from '../../types';

export interface IApiService {
  getProductList(): Promise<IProduct[]>;
  submitOrder(orderData: IOrderData): Promise<IOrderResult>;
}

export class ApiService implements IApiService {
  protected api: IApi;

  constructor(api: IApi) {
    this.api = api;
  }

  // –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ —Å —Å–µ—Ä–≤–µ—Ä–∞
  async getProductList(): Promise<IProduct[]> {
  try {
    console.log('üåê API request to /product/');
    const response = await this.api.get('/product/');
    console.log('üì° API response:', response);
    
    // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç —Å –ø–æ–ª–µ–º items
    const items = (response as any).items as IProduct[];
    console.log('üìä Parsed items:', items);
    return items;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤:', error);
    throw error;
  }
}

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
  async submitOrder(orderData: IOrderData): Promise<IOrderResult> {
    try {
      const response = await this.api.post('/order/', orderData);
      return response as IOrderResult;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–∫–∞–∑–∞:', error);
      throw error;
    }
  }
}




